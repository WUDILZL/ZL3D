#include "Queue.h"

void Queue::顶点注册队列(模型队列& 注册列表)
{
	if (!注册列表.工作平面队列.empty())
	{
		for (int i = 0; i < 注册列表.工作平面队列.size(); i++)
		{
			注册列表.工作平面队列[i].注册顶点缓冲();
		}
	}

	
	if (!注册列表.立方体队列.empty())
	{
		for (int i = 0; i < 注册列表.立方体队列.size(); i++)
		{
			注册列表.立方体队列[i].注册顶点();
		}
	}

}

void Queue::数据销毁队列(模型队列& 销毁)
{
	if (!销毁.工作平面队列.empty())
	{
		for (int i = 0; i < 销毁.工作平面队列.size(); i++)
		{
			销毁.工作平面队列[i].销毁顶点缓冲();
		}
	}


	if (!销毁.立方体队列.empty())
	{
		for (int i = 0; i < 销毁.立方体队列.size(); i++)
		{
			销毁.立方体队列[i].销毁顶点();
		}
	}
}

void Queue::渲染队列(模型队列& 渲染, My_Shader 着色器)
{
	if (!渲染.工作平面队列.empty())
	{
		for (int i = 0; i < 渲染.工作平面队列.size(); i++)
		{
			渲染.工作平面队列[i].渲染(着色器, 渲染.透视相机队列[0]);
		}
	}


	if (!渲染.立方体队列.empty())
	{
		for (int i = 0; i < 渲染.立方体队列.size(); i++)
		{
			渲染.立方体队列[i].提交渲染(着色器, 渲染.透视相机队列[0]);
		}
	}
}

void Queue::数据更新队列(模型队列& 模型)
{

}
