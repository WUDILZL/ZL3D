#include "Coord_system.h"

Coord_system::Coord_system()
{
	世界矩阵 = 矩阵4X4::单位矩阵();
	世界逆矩阵 = 矩阵4X4::单位矩阵();
	世界坐标 = 向量三维(0);
	世界旋转 = 四元数::创建欧拉角旋转(向量三维(0));
	变换矩阵 = 矩阵4X4::单位矩阵();
	缩放 = 向量三维(1);
	欧拉旋转 = 向量三维(0);
	四元旋转 = 四元数::创建欧拉角旋转(向量三维(0));
	坐标 = 向量三维(0);

	_世界矩阵 = 矩阵4X4::单位矩阵();
	_世界逆矩阵 = 矩阵4X4::单位矩阵();
	_世界坐标 = 向量三维(0);
	_世界旋转 = 四元数::创建欧拉角旋转(向量三维(0));
	_变换矩阵 = 矩阵4X4::单位矩阵();
	_缩放 = 向量三维(1);
	_欧拉旋转 = 向量三维(0);
	_四元旋转 = 四元数::创建欧拉角旋转(向量三维(0));
	_坐标 = 向量三维(0);
}

Coord_system::~Coord_system()
{
}

矩阵4X4 Coord_system::事件_计算变换矩阵()
{
	return 矩阵4X4::创建缩放矩阵(_缩放) * 创建旋转矩阵(_四元旋转) * 矩阵4X4::创建平移矩阵(_坐标);
}

void Coord_system::事件_计算世界矩阵()
{
	_世界矩阵 = _变换矩阵;
	_世界坐标 = 向量三维(_世界矩阵.M41, _世界矩阵.M42, _世界矩阵.M43);
	_世界逆矩阵 = 矩阵4X4::计算逆矩阵(_世界矩阵);
	向量三维 缩放, 平移;
	四元数 旋转;
	分解变换矩阵(_世界矩阵, 缩放, 旋转, 平移);
	_世界旋转 = 旋转;
	_世界坐标 = 平移;
}

void Coord_system::设置变换_世界旋转(四元数 旋转)
{
	四元数 差值 = 旋转 - _世界旋转;
	四元旋转 = 四元旋转 + 差值;
	设置变换_四元旋转(四元旋转);
}

void Coord_system::设置变换_世界坐标(向量三维 数据)
{
	向量三维 差值 = 数据 - _世界坐标;
	坐标 = 坐标 + 差值;
	设置变换_坐标(坐标);
}

void Coord_system::设置变换_变换矩阵(矩阵4X4 矩阵)
{
	_变换矩阵 = 矩阵;
	向量三维 缩放, 平移;
	四元数 旋转;
	bool 无用变量 = 分解变换矩阵(_变换矩阵, 缩放, 旋转, 平移);
	_坐标 = 平移;
	_缩放 = 缩放;
	_四元旋转 = 旋转;
	事件_计算世界矩阵();
}

void Coord_system::设置变换_坐标(向量三维 数据)
{
	_坐标 = 数据;
	_变换矩阵 = 事件_计算变换矩阵();
	事件_计算世界矩阵();
}

void Coord_system::设置变换_欧拉旋转(向量三维 旋转)
{
	_欧拉旋转 = 旋转;
	_四元旋转 = 四元数::创建欧拉角旋转(_欧拉旋转);
	_变换矩阵 = 事件_计算变换矩阵();
	事件_计算世界矩阵();
}

void Coord_system::设置变换_四元旋转(四元数 旋转)
{
	_四元旋转 = 四元数::计算单位四元数(旋转);
	_欧拉旋转 = 弧度转角度(四元数::四元数转欧拉角(_四元旋转));
	_变换矩阵 = 事件_计算变换矩阵();
	事件_计算世界矩阵();
}

void Coord_system::设置变换_缩放(向量三维 value)
{
	_缩放 = value;
	_变换矩阵 = 事件_计算变换矩阵();
	事件_计算世界矩阵();
}

void Coord_system::参数刷新()
{
	世界矩阵 = _世界矩阵;
	世界逆矩阵 = _世界逆矩阵;
	世界坐标 = _世界坐标;
	世界旋转 = _世界旋转;
	变换矩阵 = _变换矩阵;
	缩放 = _缩放;
	欧拉旋转 = _欧拉旋转;
	四元旋转 = _四元旋转;
	坐标 = _坐标;
}

void Coord_system::重置变换()
{
	变换矩阵 = 矩阵4X4::单位矩阵();
	设置变换_变换矩阵(变换矩阵);
}

void Coord_system::设置惯性平移(向量三维 平移值)
{
	坐标 = 坐标 + 四元旋转 * 平移值;
	设置变换_坐标(坐标);
}

void Coord_system::设置惯性旋转(向量三维 旋转轴, float 弧度)
{
	四元旋转 = 四元数::创建轴角旋转(旋转轴 * 旋转轴, 弧度) * 四元旋转;
	设置变换_四元旋转(四元旋转);
}

void Coord_system::设置绕世界中心旋转(向量三维 旋转中心, 向量三维 旋转轴, float 弧度)
{
	四元数 旋转逆;
	旋转逆 = 四元数::单位四元数();
	四元数 旋转 = 四元数::创建轴角旋转(四元数::计算逆(旋转逆) * 旋转轴, 弧度);
	四元旋转 = 旋转 * 四元旋转;
	设置变换_四元旋转(四元旋转);
	向量三维 旋转坐标 = 世界坐标 - 旋转中心;
	旋转坐标 = 旋转 * 旋转坐标;
	向量三维 临时变量世界坐标 = 旋转坐标 + 旋转中心;
	设置世界平移(临时变量世界坐标 - 世界坐标);
}

void Coord_system::设置世界平移(向量三维 平移值)
{
	坐标 = 坐标 + 平移值;
	设置变换_坐标(坐标);
}

void Coord_system::设置世界旋转(向量三维 旋转轴, float 弧度)
{
	四元旋转 = 四元数::创建轴角旋转(旋转轴, 弧度)  * 四元旋转;
	设置变换_四元旋转(四元旋转);
}
