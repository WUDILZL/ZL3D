#include "视图结构.h"

视图结构::视图结构()
{
    X = 0;
    Y = 0;
    宽度 = 0;
    高度 = 0;
    近端修剪比 = 0.0f;
    远端修剪比 = 1.0f;
    宽高比 = 0;
}

视图结构::视图结构(int x, int y, int 宽, int 高)
{
    X = x;
    Y = y;
    宽度 = 宽;
    高度 = 高;
    近端修剪比 = 0.0f;
    远端修剪比 = 1.0f;
}

视图结构::视图结构(int x, int y, int 宽, int 高, float 近端修剪, float 远端修剪)
{
    X = x;
    Y = y;
    宽度 = 宽;
    高度 = 高;
    近端修剪比 = 近端修剪;
    远端修剪比 = 远端修剪;
    if (高度 == 0) 宽高比 = 0;
    else 宽高比 = (float)宽度 / (float)高度;
}

向量三维 视图结构::世界坐标转屏幕坐标(向量三维 世界坐标, 矩阵4X4 摄像机视图矩阵, 矩阵4X4 摄像机投影矩阵)
{
    矩阵4X4 组合矩阵 = 摄像机视图矩阵 * 摄像机投影矩阵;
    向量三维 屏幕坐标 = 矩阵4X4::返回平移(世界坐标, 组合矩阵);

    float num = 世界坐标.X * 组合矩阵.M13 + 世界坐标.Y * 组合矩阵.M24 + 世界坐标.Z * 组合矩阵.M34 + 组合矩阵.M44;
    if (!计算::等于1(num))
    {
        屏幕坐标 = 屏幕坐标/ num;
    }
    屏幕坐标.X = (屏幕坐标.X + 1.0f) * 0.5f * 宽度 + X;
    屏幕坐标.Y = (0.0f - 屏幕坐标.Y + 1.0f) * 0.5f * 高度 + Y;
    屏幕坐标.Z = 屏幕坐标.Z * (远端修剪比 - 近端修剪比) + 近端修剪比;
    return 屏幕坐标;
}

向量三维 视图结构::屏幕坐标转世界坐标(向量三维 屏幕坐标, 矩阵4X4 摄像机视图矩阵, 矩阵4X4 摄像机投影矩阵)
{
    矩阵4X4 逆矩阵 = 矩阵4X4::计算逆矩阵(摄像机视图矩阵 * 摄像机投影矩阵);

    向量三维 世界坐标;
    世界坐标.X = (屏幕坐标.X - X) / 宽度 * 2.0f - 1.0f;
    世界坐标.Y = (屏幕坐标.Y - Y) / 高度 * 2.0f - 1.0f;
    世界坐标.Z = (屏幕坐标.Z - 近端修剪比) / (远端修剪比 - 近端修剪比);
    float num = 世界坐标.X * 逆矩阵.M14 + 世界坐标.Y * 逆矩阵.M24 + 世界坐标.Z * 逆矩阵.M34 + 逆矩阵.M44;
    世界坐标 = 矩阵4X4::返回平移(世界坐标, 逆矩阵);
    return 世界坐标 / num;

}

向量三维 视图结构::屏幕坐标转摄像机坐标(向量三维 屏幕坐标)
{
    向量三维 摄像机坐标;
    摄像机坐标.X = (屏幕坐标.X - X) / 宽度 * 2.0f - 1.0f;
    摄像机坐标.Y = (屏幕坐标.Y - Y) / 高度 * 2.0f - 1.0f;
    摄像机坐标.Z = (屏幕坐标.Z - 近端修剪比) / (远端修剪比 - 近端修剪比);
    return 摄像机坐标;
}

向量三维 视图结构::屏幕坐标转摄像机坐标(向量三维 屏幕坐标, 矩阵4X4 摄像机投影矩阵)
{
    矩阵4X4 逆矩阵 = 矩阵4X4::计算逆矩阵(摄像机投影矩阵);
    向量三维 世界坐标;
    世界坐标.X = (屏幕坐标.X - X) / 宽度 * 2.0f - 1.0f;
    世界坐标.Y = (屏幕坐标.Y - Y) / 高度 * 2.0f - 1.0f;
    世界坐标.Z = (屏幕坐标.Z - 近端修剪比) / (远端修剪比 - 近端修剪比);
    float num = 世界坐标.X * 逆矩阵.M14 + 世界坐标.Y * 逆矩阵.M24 + 世界坐标.Z * 逆矩阵.M34 + 逆矩阵.M44;
    世界坐标 = 矩阵4X4::返回平移(世界坐标, 逆矩阵);
    return 世界坐标 / num;
}
