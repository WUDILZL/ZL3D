#pragma once
#include "多重计算.h"
#include "包围盒.h"

class 射线结构
{
public:
	射线结构();
	射线结构(向量三维 _坐标, 向量三维 法线);
	~射线结构();
	向量三维 坐标, 方向;

public:
	
	static bool 检查三角面碰撞(射线结构 射线, 向量三维 坐标1, 向量三维 坐标2, 向量三维 坐标3, float& 距离);
	static bool 检查三角面碰撞(射线结构 射线, 向量三维 坐标1, 向量三维 坐标2, 向量三维 坐标3, 向量三维& 碰撞坐标);
	static bool 检查包围盒碰撞(射线结构 射线, 包围盒 _包围盒);
	static bool 检查包围盒碰撞(射线结构 射线, 包围盒 _包围盒, float& 距离);
	static bool 检查包围盒碰撞(射线结构 射线, 包围盒 _包围盒, 向量三维& 碰撞坐标);
	static bool 检查平面碰撞(射线结构 射线, 向量三维 面坐标, 向量三维 面法线, float& 距离, 向量三维& 碰撞点);
	static bool 检查球碰撞(射线结构 射线, 向量三维 坐标, float 半径);
	static float 计算射线与线段距离(射线结构 射线, 向量三维 起点, 向量三维 终点);
	static float 计算射线与坐标距离(射线结构 射线, 向量三维 点);
	static 射线结构 创建射线(向量三维 坐标1, 向量三维 坐标2);
	射线结构 operator +(向量三维 坐标);
	射线结构 operator -(向量三维 坐标);
	射线结构 operator *(四元数 _四元数);
	射线结构 operator *(矩阵4X4 变换矩阵);

};