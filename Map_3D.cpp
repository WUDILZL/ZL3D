#include "Map_3D.h"

Map_3D::Map_3D()
{
	全部模型.透视相机队列.push_back(My_Camera());
	全部模型.工作平面队列.push_back(Working_plane());
	全部模型.立方体队列.push_back(Cube());
}

Map_3D::~Map_3D()
{
}

void Map_3D::初始化()
{
	着色顶点属性加载();
	Queue::顶点注册队列(全部模型);
	物体控制.顶点注册();
}

void Map_3D::驱动时间线()
{
	处理时间帧();
	处理输入();
	处理调度();
	处理鼠标命中();
	处理场景时间线();
	处理场景渲染();
	处理末尾帧();
}

void Map_3D::着色顶点属性加载()
{
	着色器.载入着色器("lifangtidingdian.vs", "pian.fs");
}

void Map_3D::数据销毁队列()
{
	着色器.销毁着色器();
	Queue::数据销毁队列(全部模型);
	物体控制.顶点销毁();
}

void Map_3D::获取鼠标数据(QPoint _点击坐标, QPoint 实时坐标)
{
	QPoint 临时变量= _点击坐标 - 实时坐标;
	鼠标键盘参数.参数刷新(临时变量);
}

void Map_3D::获取当前所选模型(int 类, int 索引)
{
	模型.类型 = 类;
	模型.索引 = 索引;
	获取当前列表索引();
}

void Map_3D::添加到销毁队列(int 类型, int 索引)
{
	if (类型 == 0)
	{

	}
	if (类型 == 1)
	{

	}
	if (类型 == 2)
	{
		for (int i = 0; i < 全部模型.立方体队列.size(); i++)
		{
			if (全部模型.立方体队列[i].队列索引 == 索引)
			{
				全部模型.立方体队列[i].取消渲染();
				销毁队列数据 临时变量;
				临时变量.类型 = 类型;
				临时变量.索引 = i;
				销毁列表.push_back(临时变量);
				return;
			}
		}
		
	}
}

void Map_3D::添加模型立方体模型()
{
	int 尾索引 = 全部模型.立方体队列.size() - 1;
	全部模型.立方体队列[尾索引].注册顶点();
}

void Map_3D::处理时间帧()
{

}

void Map_3D::处理输入()
{
	鼠标键盘参数.时间线();
	物体控制.时间线(鼠标键盘参数.返回键盘响应信息());
	物体操控(全部模型);
}

void Map_3D::处理调度()
{
}

void Map_3D::处理鼠标命中()
{
}

void Map_3D::处理场景时间线()
{
	刷新队列参数();
	if (鼠标键盘参数.ctrl检测)
	{
		if (鼠标键盘参数.鼠标事件 || 鼠标键盘参数.滚轮事件)全部模型.透视相机队列[0].获取鼠标数据(鼠标键盘参数.鼠标滚轮, 鼠标键盘参数.鼠标x, 鼠标键盘参数.鼠标y);
	}
}

void Map_3D::处理场景渲染()
{
	Queue::渲染队列(全部模型, 着色器);
	物体控制.渲染(着色器, 全部模型.透视相机队列[0]);
}

void Map_3D::处理末尾帧()
{
	鼠标键盘参数.参数重置();
	处理销毁();
}

void Map_3D::处理销毁()
{
	if (!销毁列表.empty())
	{
		for (int i = 0; i < 销毁列表.size(); i++)
		{
			if (销毁列表[i].类型 == 0)
			{

			}
			else if (销毁列表[i].类型 == 1)
			{

			}
			else if (销毁列表[i].类型 == 2)
			{
				全部模型.立方体队列[销毁列表[i].索引].销毁顶点();
				全部模型.立方体队列.erase(全部模型.立方体队列.begin() + 销毁列表[i].索引);
			}
		}
		销毁列表.clear();
	}
}

void Map_3D::获取当前列表索引()
{
	if (模型.类型 == 0)
	{

	}
	else if (模型.类型 == 1)
	{

	}
	else if (模型.类型 == 2)
	{
		for (int i = 0; i < 全部模型.立方体队列.size(); i++)
		{
			if (全部模型.立方体队列[i].队列索引 == 模型.索引)
			{
				模型.列表位置 = i;
			}
		}
	}
}

void Map_3D::物体操控(模型队列& 操纵模型)
{
	if (模型.类型 == 0)
	{

	}
	else if(模型.类型 == 1)
	{ 
	
	}
	else if (模型.类型 == 2)
	{
		if (模型.列表位置 != -1 && 全部模型.立方体队列.size() >= 模型.列表位置)
		{
			if (全部模型.立方体队列[模型.列表位置].选中状态 && !鼠标键盘参数.ctrl检测)
			{
				if (鼠标键盘参数.鼠标x != 0)物体控制.控制(全部模型.立方体队列[模型.列表位置], 鼠标键盘参数.鼠标x, 鼠标键盘参数.鼠标y);
			}
		}
	}
}

void Map_3D::刷新队列参数()
{
	全部模型.透视相机队列[0].参数刷新();
	全部模型.透视相机队列[0].视图矩阵 = 全部模型.透视相机队列[0].世界逆矩阵;
	for (int i = 0; i < 全部模型.工作平面队列.size(); i++)
	{
		全部模型.工作平面队列[i].参数刷新();
	}
	for (int i = 0; i < 全部模型.立方体队列.size(); i++)
	{
		全部模型.立方体队列[i].参数刷新();
	}
}
