#include "Camera_base.h"

Camera_base::Camera_base()
{
	宽高比 = 1.0f;
	近端修剪 = 0.1f;
	远端修剪 = 10000.0f;
	
}

Camera_base::~Camera_base()
{
}

void Camera_base::事件_计算世界矩阵()
{
	Coord_system::事件_计算世界矩阵();
	视图矩阵 = 世界逆矩阵;
	事件_更新投影矩阵();
}

void Camera_base::事件_更新投影矩阵()
{
	投影矩阵 = 矩阵4X4::单位矩阵();
}

射线结构 Camera_base::获取鼠标射线(向量二维 鼠标屏幕坐标, 视图结构 渲染视口)
{
	渲染视口 = 视图结构(渲染视口.X, 渲染视口.Y, 渲染视口.宽度, 渲染视口.高度, 近端修剪, 远端修剪);
	向量三维 近点 = 向量三维(鼠标屏幕坐标, 近端修剪);
	向量三维 远点 = 向量三维(鼠标屏幕坐标, 远端修剪);

	向量三维 近点3D = 渲染视口.屏幕坐标转摄像机坐标(近点, 投影矩阵);//将屏幕空间转换为世界空间中的点
	向量三维 远点3D = 渲染视口.屏幕坐标转摄像机坐标(远点, 投影矩阵);//将屏幕空间转换为世界空间中的点

	向量三维 方向 = 向量三维::计算单位向量(远点3D - 近点3D);
	射线结构 鼠标射线 = 射线结构(近点3D, 方向);
	return 鼠标射线;
}
