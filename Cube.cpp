#include "Cube.h"

Cube::Cube()
{
	队列索引 = 0;
	尺寸x = 1;
	尺寸y = 1;
	尺寸z = 1;
	分段x = 1;
	分段y = 1;
	分段z = 1;
	选中状态 = false;
	名称 = QString::fromLocal8Bit("立方体");
	立方体 = Model_FWK::创建立方体(尺寸x, 尺寸y, 尺寸z, 分段x, 分段y, 分段z);
	立方体.获取渲染面数据();
	立方体.获取渲染边数据();
	立方体.获取渲染点数据();
	更新数据();
}

Cube::~Cube()
{
}

void Cube::取消渲染()
{
	顶点属性.渲染面顶点注册 = false;
	顶点属性.渲染边顶点注册 = false;
	顶点属性.渲染点顶点注册 = false;
}

void Cube::注册顶点()
{
	立方体._渲染面.注册顶点缓冲(立方体.索引面坐标集合, 立方体.索引面);
	立方体._渲染边.注册顶点缓冲(立方体.索引边坐标集合, 立方体.索引边);
	立方体._渲染点.注册顶点缓冲(立方体.索引点坐标集合, 立方体.索引点);
	if (立方体._渲染面.VAO != -1)顶点属性.渲染面顶点注册 = true;
	if (立方体._渲染边.VAO != -1)顶点属性.渲染边顶点注册 = true;
	if (立方体._渲染点.VAO != -1)顶点属性.渲染点顶点注册 = true;
}

void Cube::销毁顶点()
{
	立方体._渲染面.清除顶点缓冲();
	立方体._渲染边.清除顶点缓冲();
	立方体._渲染点.清除顶点缓冲();
}

void Cube::提交渲染(My_Shader 着色器, My_Camera 相机)
{
	if (渲染属性.是否渲染)
	{
		if (顶点属性.渲染面顶点注册 && 渲染属性.渲染面) Color_shader::渲染面(着色器, 立方体._渲染面, 世界矩阵, 物体颜色.面, 相机);
		if (顶点属性.渲染边顶点注册 && 渲染属性.渲染线) Color_shader::渲染线(着色器, 立方体._渲染边, 世界矩阵, 物体颜色.线, 相机, 0.01f, -0.001f);
		if (顶点属性.渲染点顶点注册 && 渲染属性.渲染点) Color_shader::渲染点(着色器, 立方体._渲染点, 世界矩阵, 物体颜色.点, 相机);
	}
}

void Cube::修改模型()
{
	if (!选中状态) return;
	顶点属性.渲染面顶点注册 = false;
	顶点属性.渲染边顶点注册 = false;
	顶点属性.渲染点顶点注册 = false;
	销毁顶点();
	立方体 = Model_FWK::创建立方体(尺寸x, 尺寸y, 尺寸z, 分段x, 分段y, 分段z);
	立方体.获取渲染面数据();
	立方体.获取渲染边数据();
	立方体.获取渲染点数据();
	注册顶点();
	更新数据();
}

void Cube::更新数据()
{
	总数据.名称 = 名称;

	总数据.选中状态 = 选中状态;

	总数据.尺寸.X = 尺寸x;
	总数据.尺寸.Y = 尺寸y;
	总数据.尺寸.Z = 尺寸z;

	总数据.分段.X = 分段x;
	总数据.分段.Y = 分段y;
	总数据.分段.Z = 分段z;

	总数据.渲染状态面 = 渲染属性.渲染面;
	总数据.渲染状态线 = 渲染属性.渲染线;
	总数据.渲染状态点 = 渲染属性.渲染点;

	总数据.自身坐标 = 坐标;
	总数据.世界坐标 = 世界坐标;
}

void Cube::渲染中更新坐标()
{
	总数据.自身坐标 = 坐标;
	总数据.世界坐标 = 世界坐标;
}
